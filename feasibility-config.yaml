# output file format: "yaml", "csv"
output_format: "csv"
# Utilization distribution to generate task sets: "uunifast", "rand-fixed-sum", "automotive"
utilization_distribution: "uunifast"
# Mathematical distribution to generate periods: "uniform", "log-uniform",
# "uniform-discrete" ,"log-uniform-discrete", "automotive"
period_distribution: "log-uniform"
# Minimum and maximum period for the period distribution
period_range: [1000, 10000]
# Execution time variation in percentage of the execution time
exec_variation: 0.05
# Jitter in percentage of the period for variable jitter and in time units for constant jitter
jitter: 0.05
# Constant or variable jitter
constant_jitter: false
# mapping heuristic to use 0. No mapping, 1. Worst-fit, 2. Best-fit, 3. First-fit
mapping_heuristic: 0
# ---------------------------------------------------------------------
# Generate Dot file for the DAGs
generate_dot: false
# DAG type to generate: "fork-join", "random", "chain"
# NOTE: in "fork-join" DAGs, each task generates a fork-join graph
dag_type: "fork-join"
# probability of forking a vertex in the DAG (only for fork-join DAGs)
fork_probability: 0.5
# probability of adding edge between vertices in the DAG (only for fork-join DAGs)
edge_probability: 0.5
# maximum number of branches per fork
max_branches: 3
# maximum number of vertices in the DAG (only for fork-join DAGs)
max_vertices: 10
# Number of root vertices in the DAG (only for random DAGs)
num_roots: 1
# maximum depth of the DAG
max_depth: 3
# Priority assignment algorithm: "RM", "DM", "EDF" (only for the job sets)
priority_assignment: "RM"
max_jobs: 1000 # TODO Figure out how to compute the correct value...